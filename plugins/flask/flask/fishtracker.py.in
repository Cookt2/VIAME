import glob
import json
import numpy as np
import os
import shutil
import subprocess
import time
from flask import Flask
from flask import flash
from flask import redirect
from flask import render_template
from flask import request
from flask import send_from_directory
from flask import url_for

def mkdir_p(path):
    if not os.path.exists(path):
        dir = os.path.dirname(path)
        mkdir_p(dir)
        os.makedirs(path)

def allowed_file(filename):
    ALLOWED_EXTENSIONS = set(['json'])
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

app = Flask(__name__)
app.secret_key = "secret_key"

@app.route('/reset/')
def reset_config():
    app.config['fs_root'] = '/'
    app.config['input_file'] = ''
    app.config['start_frame'] = ''
    app.config['stop_frame'] = ''
    app.config['skip_frame'] = ''
    app.config['data_path'] = ''
    app.config['curr_tag'] = ''
    app.config['new_tag'] = ''
    app.config['active_model'] = ''
    app.config['train_data'] = ''
    app.config['model_name'] = ''
    return 'reset is done'

@app.route('/config/<key>/')
def get_config(key):
    if key in app.config:
        return 'path["{0}"] = {1}'.format(key, app.config[key])
    else:
        return 'path["{0}"] is undefined'.format(key)

@app.route('/config/<key>/<path:value>')
def set_config(key, value):
    if key in app.config and app.config[key].startswith('/'):
        app.config[key] = os.path.join('/', value)
        mkdir_p(app.config[key])
    else:
        app.config[key] = value
    return 'path["{0}"] = {1}'.format(key, app.config[key])

@app.route('/remove/<path:objname>')
def remove_object(objname):
    if os.path.isfile(os.path.join(app.config['fs_root'], objname)):
        os.remove(os.path.join(app.config['fs_root'], objname))
        return '{0} deleted'.format(os.path.join(app.config['fs_root'], objname))
    elif os.path.isdir(os.path.join(app.config['fs_root'], objname)):
        shutil.rmtree(os.path.join(app.config['fs_root'], objname))
        return '{0} removed'.format(os.path.join(app.config['fs_root'], objname))
    else:
        return '{0} not exist'.format(os.path.join(app.config['fs_root'], objname))

@app.route('/file/<path:filename>')
def download_file(filename, attach = False ):
    return send_from_directory(app.config['fs_root'], filename, as_attachment = attach)

@app.route('/')
def index():
    reset_config()
    set_config('fs_root', '${FT_DATA_ROOT}/flaskfs')
    set_config('active_model', 'mbari_type')
    return render_template('index.html')

@app.route('/video/', methods=['GET', 'POST'])
def display_video():
    if request.method == 'POST':
        if not request.form['input_file']:
            flash('Input file must be filled')
            return(redirect(request.url))
        if not os.path.exists(os.path.join(app.config['fs_root'], 'upload', request.form['input_file'])):
            flash('Video does not exist')
            return(redirect(request.url))
        if not request.form['input_file'] == app.config['input_file']:
            input_changed = True
        else:
            input_changed = False
        set_config('input_file', request.form['input_file'])
        app.logger.debug('input_file = %s', app.config['input_file'])

        if 'raw_button' in request.form:
            video_type = 'raw'
        elif 'prop_button' in request.form:
            video_type = 'prop'
        elif 'class_button' in request.form:
            video_type = 'class'
        else:
            video_type = ''
        app.logger.debug('video_type = %s', video_type)

        frame_list = sorted([int(os.path.splitext(os.path.basename(frame_file))[0]) for frame_file in glob.glob(os.path.join(app.config['fs_root'], 'video', os.path.splitext(app.config['input_file'])[0], '*', video_type, 'images/*.jpg'))])

        if frame_list:
            start_frame = min(frame_list)
        else:
            start_frame = 0
        if request.form['start_frame'] and not input_changed:
            start_frame = max(start_frame, int(request.form['start_frame']))
        set_config('start_frame', str(start_frame))
        app.logger.debug('start_frame = %s', app.config['start_frame'])
        if frame_list:
            stop_frame = max(frame_list) + 1
        else:
            stop_frame = 1000000
        if request.form['stop_frame'] and not input_changed:
            stop_frame = min(stop_frame, int(request.form['stop_frame']))
        set_config('stop_frame', str(stop_frame))
        app.logger.debug('stop_frame = %s', app.config['stop_frame'])
        skip_frame = start_frame;
        if 'skip_frame' in request.form and request.form['skip_frame'] and not input_changed:
            skip_frame = int(request.form['skip_frame'])
        set_config('skip_frame', str(skip_frame))
        app.logger.debug('skip_frame = %s', app.config['skip_frame'])

        if not frame_list:
            if video_type == 'raw':
                config_file = os.path.join(app.config['fs_root'], 'algorithm/config/raw_video.json')
            else:
                config_file = os.path.join(app.config['fs_root'], 'algorithm/config/{0}_{1}.json'.format(video_type, app.config['active_model']))
            reader = open(config_file, 'rt')
            config = json.load(reader)
            reader.close()
            config['arguments']['input_file'] = 'upload/' + app.config['input_file']
            config['options']['start'] = app.config['start_frame']
            config['options']['stop'] = app.config['stop_frame']
            cmdline = ['../Python/' + str(config['shell_script']), '../Python/' + str(config['python_file'])]
            for key, value in config['arguments'].iteritems():
                cmdline.append(str(value))
            for key, value in config['options'].iteritems():
                cmdline.append('--' + str(key) + '=' + str(value))
            print cmdline
            pid = subprocess.Popen(cmdline).pid
            print str(pid)
            return redirect(url_for('download_file', filename = 'algorithm/log/stdout_log.txt'))

        return render_template('video.html', input_file = app.config['input_file'], start_frame = app.config['start_frame'], stop_frame = app.config['stop_frame'], skip_frame = app.config['skip_frame'], video_type = video_type)
    set_config('input_file', '')
    set_config('start_frame', '')
    set_config('stop_frame', '')
    set_config('skip_frame', '')
    return render_template('video.html', input_file = app.config['input_file'], start_frame = app.config['start_frame'], stop_frame = app.config['stop_frame'], skip_frame = app.config['skip_frame'])

@app.route('/dataset/')
def process_dataset():
    set_config('data_path', '')
    set_config('curr_tag', '')
    set_config('new_tag', '')
    return(redirect('/dataset/0'))

@app.route('/dataset/<int:imgid>', methods=['GET', 'POST'])
def annotate_dataset(imgid):
    tag_idx = -1
    tag_value = 0
    reader = open(os.path.join(app.config['fs_root'], 'model', app.config['active_model'], '{0}.json'.format(app.config['active_model'])), 'r')
    label = json.load(reader)
    reader.close()    

    if request.method == 'POST':
        if not request.form['data_path']:
            flash('Dataset folder must be filled')
            return(redirect(request.url))
        if request.form['data_path'].find('/') == -1:
            set_config('data_path', os.path.join(request.form['data_path'], 'selected'))
        else:
            set_config('data_path', request.form['data_path'])
        app.logger.debug('data_path = %s', app.config['data_path'])
        set_config('curr_tag', 'Unsorted')
        if request.form['curr_tag']:
            set_config('curr_tag', request.form['curr_tag'])
        if request.form['curr_sel']:
            set_config('curr_tag', request.form['curr_sel'])
        app.logger.debug('curr_tag = %s', app.config['curr_tag'])
        if request.form['new_tag']:
            set_config('new_tag', request.form['new_tag'])
        if request.form['new_sel']:
            set_config('new_tag', request.form['new_sel'])
        app.logger.debug('new_tag = %s', app.config['new_tag'])

        seg_mode = ''
        if 'prop_button' in request.form:
            if os.path.isfile(os.path.join(app.config['fs_root'], 'dataset', app.config['data_path'], 'All/objects.json')):
                reader = open(os.path.join(app.config['fs_root'], 'dataset', app.config['data_path'], 'All/objects.json'), 'rt')
                data = json.load(reader)
                reader.close()
                if all((data['frames'][f]['frame_rois'][r]['roi_score'] == 0.0 or data['frames'][f]['frame_rois'][r]['roi_score'] == -1.0) for f in range(len(data['frames'])) for r in range(len(data['frames'][f]['frame_rois']))):
                    seg_mode = 'prop'
            if not os.path.isfile(os.path.join(app.config['fs_root'], 'video', app.config['data_path'], 'prop/objects.json')):
                flash('Dataset does not exist')
                return(redirect(request.url))
            if not seg_mode:
                remove_object(os.path.join('dataset', app.config['data_path'], 'All'))
                remove_object(os.path.join('dataset', app.config['data_path'], 'Cluster'))
                remove_object(os.path.join('dataset', app.config['data_path'], 'Import'))
                remove_object(os.path.join('dataset', app.config['data_path'], 'Export'))
            cmdline = ['../Python/run_python_script.sh', '../Python/crop_roi.py', os.path.join('video', app.config['data_path'], 'prop/objects.json')]
            print cmdline
            p = subprocess.Popen(cmdline)
            app.logger.debug('pid = %s', str(p.pid))
            p.wait()
            if not seg_mode:
                cmdline = ['../Python/run_python_script.sh', '../Python/calc_feature.py', os.path.join('dataset', app.config['data_path'], 'All/images')]
                print cmdline
                p = subprocess.Popen(cmdline)
                app.logger.debug('pid = %s', str(p.pid))
                p.wait()
                cmdline = ['../Python/run_python_script.sh', '../Python/blind_seg.py', 'algorithm/config/blind_seg.json', os.path.join('dataset', app.config['data_path'])]
                print cmdline
                p = subprocess.Popen(cmdline)
                app.logger.debug('pid = %s', str(p.pid))
                p.wait()
                return redirect(url_for('download_file', filename = 'algorithm/log/stdout_log.txt'))
        elif 'quick_button' in request.form:
            if os.path.isfile(os.path.join(app.config['fs_root'], 'dataset', app.config['data_path'], 'All/objects.json')):
                reader = open(os.path.join(app.config['fs_root'], 'dataset', app.config['data_path'], 'All/objects.json'), 'rt')
                data = json.load(reader)
                reader.close()
                if all(data['frames'][f]['frame_rois'][r]['roi_score'] >= 0 for f in range(len(data['frames'])) for r in range(len(data['frames'][f]['frame_rois']))) and not all(data['frames'][f]['frame_rois'][r]['roi_score'] > 0 for f in range(len(data['frames'])) for r in range(len(data['frames'][f]['frame_rois']))):
                    seg_mode = 'quick'
            if not os.path.isfile(os.path.join(app.config['fs_root'], 'video', app.config['data_path'], 'class/objects.json')):
                flash('Dataset does not exist')
                return(redirect(request.url))
            if not seg_mode:
                remove_object(os.path.join('dataset', app.config['data_path'], 'All'))
                remove_object(os.path.join('dataset', app.config['data_path'], 'Cluster'))
                remove_object(os.path.join('dataset', app.config['data_path'], 'Import'))
                remove_object(os.path.join('dataset', app.config['data_path'], 'Export'))
            cmdline = ['../Python/run_python_script.sh', '../Python/crop_roi.py', os.path.join('video', app.config['data_path'], 'class/objects.json')]
            print cmdline
            p = subprocess.Popen(cmdline)
            app.logger.debug('pid = %s', str(p.pid))
            p.wait()
            if not seg_mode:
                cmdline = ['../Python/run_python_script.sh', '../Python/calc_feature.py', os.path.join('dataset', app.config['data_path'], 'All/images')]
                print cmdline
                p = subprocess.Popen(cmdline)
                app.logger.debug('pid = %s', str(p.pid))
                p.wait()
                cmdline = ['../Python/run_python_script.sh', '../Python/blind_seg.py', 'algorithm/config/blind_seg.json', os.path.join('dataset', app.config['data_path'])]
                print cmdline
                p = subprocess.Popen(cmdline)
                app.logger.debug('pid = %s', str(p.pid))
                p.wait()
                return redirect(url_for('download_file', filename = 'algorithm/log/stdout_log.txt'))
        elif 'full_button' in request.form:
            if os.path.isfile(os.path.join(app.config['fs_root'], 'dataset', app.config['data_path'], 'All/objects.json')):
                reader = open(os.path.join(app.config['fs_root'], 'dataset', app.config['data_path'], 'All/objects.json'), 'rt')
                data = json.load(reader)
                reader.close()
                if all(data['frames'][f]['frame_rois'][r]['roi_score'] > 0 for f in range(len(data['frames'])) for r in range(len(data['frames'][f]['frame_rois']))):
                    seg_mode = 'full'
            if not os.path.isfile(os.path.join(app.config['fs_root'], 'video', app.config['data_path'], 'class/objects.json')):
                flash('Dataset does not exist')
                return(redirect(request.url))
            if not seg_mode:
                remove_object(os.path.join('dataset', app.config['data_path'], 'All'))
                remove_object(os.path.join('dataset', app.config['data_path'], 'Cluster'))
                remove_object(os.path.join('dataset', app.config['data_path'], 'Import'))
                remove_object(os.path.join('dataset', app.config['data_path'], 'Export'))
            cmdline = ['../Python/run_python_script.sh', '../Python/crop_roi.py', os.path.join('video', app.config['data_path'], 'class/objects.json')]
            print cmdline
            p = subprocess.Popen(cmdline)
            app.logger.debug('pid = %s', str(p.pid))
            p.wait()
            if not seg_mode:
                return redirect(url_for('download_file', filename = 'algorithm/log/stdout_log.txt'))
        app.logger.debug('seg_mode = %s', seg_mode)

        for i in range(0, 24):
            if ('pos_' + str(i)) in request.form:
                tag_idx = i
                tag_value = 1
            if ('neg_' + str(i)) in request.form:
                tag_idx = i
                tag_value = -1
        app.logger.debug('tag_idx = %d', tag_idx)
        app.logger.debug('tag_value = %d', tag_value)

    if app.config['data_path'] and os.path.isfile(os.path.join(app.config['fs_root'], 'dataset', app.config['data_path'], 'All/objects.json')):
        reader = open(os.path.join(app.config['fs_root'], 'dataset', app.config['data_path'], 'All/objects.json'), 'rt')
        data = json.load(reader)
        reader.close()

        idxtable = []
        grptable = []
        cnttable = []
        scrtable = []
        roitable = []
        imgtable = []
        if app.config['curr_tag'].startswith('CLUSTER='):
            grpid = int(app.config['curr_tag'][8:])
            for f in range(len(data['frames'])):
                for r in range(len(data['frames'][f]['frame_rois'])):
                    if data['frames'][f]['frame_rois'][r]['roi_label']['label_id'] == grpid:
                        scrtable.append(0.0)
                        idxtable.append(1000 * f + r)
                        grptable.append(-1)
                        cnttable.append(1)
            imgtable = [os.path.join('/file/video', app.config['data_path'], 'prop/images/{0:06d}.jpg'.format(data['frames'][idx / 1000]['frame_id'])) for idx in idxtable]
            roitable = [os.path.join('/file/dataset', app.config['data_path'], 'All/images/frame{0:06d}/{0:06d}_{1:06d}.jpg'.format(data['frames'][idx / 1000]['frame_id'], data['frames'][idx / 1000]['frame_rois'][idx % 1000]['roi_id'])) for idx in idxtable]
        else:
            if all(data['frames'][f]['frame_rois'][r]['roi_score'] > 0 for f in range(len(data['frames'])) for r in range(len(data['frames'][f]['frame_rois']))):
                for f in range(len(data['frames'])):
                    for r in range(len(data['frames'][f]['frame_rois'])):
                        scrtable.append(data['frames'][f]['frame_rois'][r]['roi_score'])
                        idxtable.append(1000 * f + r)
                        grptable.append(-1)
                        cnttable.append(-1)
                scrindex = np.argsort(scrtable)
                scrtable = [scrtable[index] for index in scrindex]
                idxtable = [idxtable[index] for index in scrindex]
                imgtable = [os.path.join('/file/video', app.config['data_path'], 'class/images/{0:06d}.jpg'.format(data['frames'][idx / 1000]['frame_id'])) for idx in idxtable if data['frames'][idx / 1000]['frame_rois'][idx % 1000]['roi_label']['label_name'] == app.config['curr_tag']]
            else:
                for f in range(len(data['frames'])):
                    for r in range(len(data['frames'][f]['frame_rois'])):
                        if data['frames'][f]['frame_rois'][r]['roi_label']['label_id'] < 0 or not data['frames'][f]['frame_rois'][r]['roi_label']['label_id'] in grptable:
                            scrtable.append(0.0)
                            idxtable.append(1000 * f + r)
                            grptable.append(data['frames'][f]['frame_rois'][r]['roi_label']['label_id'])
                            cnttable.append(1)
                        else:
                            cnttable[grptable.index(data['frames'][f]['frame_rois'][r]['roi_label']['label_id'])] += 1
                            if data['frames'][f]['frame_rois'][r]['roi_score'] == 0.0:
                                idxtable[grptable.index(data['frames'][f]['frame_rois'][r]['roi_label']['label_id'])] = 1000 *f + r
                cntindex = np.argsort(cnttable)[::-1]
                cnttable = [cnttable[index] for index in cntindex]
                idxtable = [idxtable[index] for index in cntindex]
                grptable = [grptable[index] for index in cntindex]
                imgtable = [os.path.join('/file/video', app.config['data_path'], 'prop/images/{0:06d}.jpg'.format(data['frames'][idx / 1000]['frame_id'])) for idx in idxtable if data['frames'][idx / 1000]['frame_rois'][idx % 1000]['roi_label']['label_name'] == app.config['curr_tag']]
            roitable = [os.path.join('/file/dataset', app.config['data_path'], 'All/images/frame{0:06d}/{0:06d}_{1:06d}.jpg'.format(data['frames'][idx / 1000]['frame_id'], data['frames'][idx / 1000]['frame_rois'][idx % 1000]['roi_id'])) for idx in idxtable if data['frames'][idx / 1000]['frame_rois'][idx % 1000]['roi_label']['label_name'] == app.config['curr_tag']]
            cnttable = [cnttable[i] for i in range(len(idxtable)) if data['frames'][idxtable[i] / 1000]['frame_rois'][idxtable[i] % 1000]['roi_label']['label_name'] == app.config['curr_tag']]
            grptable = [grptable[i] for i in range(len(idxtable)) if data['frames'][idxtable[i] / 1000]['frame_rois'][idxtable[i] % 1000]['roi_label']['label_name'] == app.config['curr_tag']]
            scrtable = [scrtable[i] for i in range(len(idxtable)) if data['frames'][idxtable[i] / 1000]['frame_rois'][idxtable[i] % 1000]['roi_label']['label_name'] == app.config['curr_tag']]
            idxtable = [idxtable[i] for i in range(len(idxtable)) if data['frames'][idxtable[i] / 1000]['frame_rois'][idxtable[i] % 1000]['roi_label']['label_name'] == app.config['curr_tag']]
            imgtable = [imgtable[i] if cnttable[i] <= 1 else '/dataset/CLUSTER={0}'.format(grptable[i]) for i in range(len(idxtable))]

        while len(roitable) < 24:
            scrtable.append(-1.0)
            idxtable.append(-1)
            grptable.append(-1)
            cnttable.append(0)
            roitable.append('/static/empty.png')
            imgtable.append('/static/empty.png')

        if imgid > len(roitable) - 24:
            return(redirect('/dataset/' + str(len(roitable) - 24)))
        scrlist = scrtable[imgid : imgid + 24]
        idxlist = idxtable[imgid : imgid + 24]
        grplist = grptable[imgid : imgid + 24]
        cntlist = cnttable[imgid : imgid + 24]
        roilist = roitable[imgid : imgid + 24]
        imglist = imgtable[imgid : imgid + 24]

        if tag_idx >= 0:
            if tag_value == 1:
                if grplist[tag_idx] >= 0:
                    for f in range(len(data['frames'])):
                        for r in range(len(data['frames'][f]['frame_rois'])):
                            if data['frames'][f]['frame_rois'][r]['roi_label']['label_id'] == grplist[tag_idx]:
                                data['frames'][f]['frame_rois'][r]['roi_label']['label_name'] = app.config['new_tag']
                else:
                    data['frames'][idxlist[tag_idx] / 1000]['frame_rois'][idxlist[tag_idx] % 1000]['roi_label']['label_name'] = app.config['new_tag']
            else:
                if grplist[tag_idx] >= 0:
                    for f in range(len(data['frames'])):
                        for r in range(len(data['frames'][f]['frame_rois'])):
                            if data['frames'][f]['frame_rois'][r]['roi_label']['label_id'] == grplist[tag_idx]:
                                data['frames'][f]['frame_rois'][r]['roi_label']['label_name'] = 'Negative'
                else:
                    data['frames'][idxlist[tag_idx] / 1000]['frame_rois'][idxlist[tag_idx] % 1000]['roi_label']['label_name'] = 'Negative'
            remove_object(os.path.join('dataset', app.config['data_path'], 'Export'))
            writer = open(os.path.join(app.config['fs_root'], 'dataset', app.config['data_path'], 'All/objects.json'), 'wt')
            writer.write(json.dumps(data, indent = 4))
            writer.close()
            return(redirect(request.url))

        return render_template('dataset.html', img_id = imgid, data_path = app.config["data_path"], curr_tag = app.config["curr_tag"], new_tag = app.config["new_tag"], ptag_list = sorted(label['pos_dics'].keys()), ntag_list = sorted(label['neg_dics'].keys()), roi_list = roilist, img_list = imglist, cnt_list = cntlist, scr_list = scrlist, random_param = time.time())
    else:
        return render_template('dataset.html', img_id = imgid, data_path = app.config["data_path"], curr_tag = app.config["curr_tag"], new_tag = app.config["new_tag"], ptag_list = sorted(label['pos_dics'].keys()), ntag_list = sorted(label['neg_dics'].keys()))

@app.route('/dataset/<filter>')
def filter_dataset(filter):
    if app.config['curr_tag'].startswith('CLUSTER='):
        set_config('new_tag', '')
    else:
        set_config('new_tag', app.config['curr_tag'])
    set_config('curr_tag', filter)
    return redirect('/dataset/0')

@app.route('/model/', methods=['GET', 'POST'])
def train_model():
    if request.method == 'POST':
        if 'train_button' in request.form:
            if not request.form['train_data']:
                flash('Dataset folder must be filled')
                return(redirect(request.url))
            if not os.path.isdir(os.path.join(app.config['fs_root'], 'dataset', request.form['train_data'])):
                flash('Dataset does not exist')
                return(redirect(request.url))
            if request.form['train_data'].find('/') == -1:
                set_config('train_data', os.path.join(request.form['train_data'], 'selected'))
            else:
                set_config('train_data', request.form['train_data'])
            app.logger.debug('train_data = %s', app.config['train_data'])
            if not request.form['model_name']:
                flash('Model name must be filled')
                return(redirect(request.url))
            if os.path.isfile('{0}/model/{1}_type/{1}_type.json'.format(app.config['fs_root'], request.form['model_name'])):
                flash('Model already exists')
                return(redirect(request.url))
            set_config('model_name', request.form['model_name'])
            app.logger.debug('model_name = %s', app.config['model_name'])

            cmdline = ['../Python/run_python_script.sh', '../Python/prepare_model.py', '../Python/create_new_model.sh', '{0}/model/{1}_type/{1}_type.json'.format(app.config['fs_root'], app.config['model_name']), os.path.join(app.config['fs_root'], 'dataset', app.config['train_data'], 'Export')]
            app.logger.debug('cmdline = %s', cmdline)
            p = subprocess.Popen(cmdline)
            app.logger.debug('pid = %s', str(p.pid))
            p.wait()
            cmdline = ['../Python/run_python_script.sh', '../Python/gen_filelist.py', 'model/{0}_type/{0}_type.json'.format(app.config['model_name'])]
            app.logger.debug('cmdline = %s', cmdline)
            p = subprocess.Popen(cmdline)
            app.logger.debug('pid = %s', str(p.pid))
            p.wait()
            config_file = os.path.join(app.config['fs_root'], 'algorithm/config/{0}_type_train.json'.format(app.config['model_name']))
            reader = open(config_file, 'rt')
            config = json.load(reader)
            reader.close()
            cmdline = ['../Python/' + str(config['shell_script'])]
            for key, value in config['arguments'].iteritems():
                cmdline.append(str(value))
            for key, value in config['options'].iteritems():
                cmdline.append('--' + str(key) + '=' + str(value))
            print cmdline
            pid = subprocess.Popen(cmdline).pid
            print str(pid)
            return redirect(url_for('download_file', filename = 'algorithm/log/stderr_log.txt'))
        else:
            if not request.form['model_sel']:
                flash('Trained model must be selected')
                return(redirect(request.url))
            set_config('active_model', '{0}_type'.format(request.form['model_sel']))
            app.logger.debug('active_model = %s', app.config['active_model'])
    else:
        set_config('train_data', '')
        set_config('model_name', '')

    for file in glob.glob(os.path.join(app.config['fs_root'], 'model/snapshot/*.solverstate')):
        remove_object(os.path.join(app.config['fs_root'], 'model/snapshot', os.path.basename(file)))
    for file in glob.glob(os.path.join(app.config['fs_root'], 'model/snapshot/*[1-9]000.caffemodel')):
        remove_object(os.path.join(app.config['fs_root'], 'model/snapshot', os.path.basename(file)))
    for file in glob.glob(os.path.join(app.config['fs_root'], 'model/snapshot/*[2-7]0000.caffemodel')):
        remove_object(os.path.join(app.config['fs_root'], 'model/snapshot', os.path.basename(file)))

    inactive_list = []
    for root, dirs, files in os.walk(os.path.join(app.config['fs_root'], 'model')):
        for dir in dirs:
            if dir not in ['snapshot', 'fish_type', app.config['active_model']]:
                inactive_list.append(dir[:-5])
    return render_template('model.html', active_model = app.config['active_model'][:-5], inactive_models = inactive_list, train_data = app.config['train_data'], model_name = app.config['model_name'])

@app.route('/algorithm/', methods=['GET', 'POST'])
def config_algorithm():
    if request.method == 'POST':
        if 'download_button' in request.form:
            if not request.form['config_file']:
                flash('Filename must be filled')
                return(redirect(request.url))
            return redirect(url_for('download_file', filename = os.path.join('algorithm/config/', request.form['config_file']), attach = True))
        else:
            if 'file' not in request.files:
                flash('No file in request')
                return redirect(request.url)
            file = request.files['file']
            if file.filename == '':
                flash('No file selected')
                return redirect(request.url)
            filename = file.filename
            if not allowed_file(file.filename):
                flash('Extension of file not allowed')
                return redirect(request.url)
            if file:
                file.save(os.path.join(app.config['fs_root'], 'algorithm/config', filename))
    data = [os.path.basename(file) for file in glob.glob(os.path.join(app.config['fs_root'], 'algorithm/config/*'))]
    return render_template('algorithm.html', file_name = 'algorithm/config', file_text = '\n'.join(sorted(data)))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=3000, debug=True)


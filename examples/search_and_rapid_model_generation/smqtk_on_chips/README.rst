
************************
Image Search Using SMQTK
************************

.. image:: http://www.viametoolkit.org/wp-content/uploads/2018/01/search_ex.png
   :scale: 30
   :align: center
   :target: https://github.com/Kitware/VIAME/tree/master/examples/search_and_rapid_model_generation/smqtk_on_chips

This section corresponds to `this example online`_, in addition to the
smqtk_on_chips example folder in a VIAME installation. This folder contains examples
covering image search over sub-regions of an archive of input images. Note: while searching
via SMQTK does currently let you save out final results, it does not let you save out
final detection models for re-use.

.. _this example online: https://github.com/Kitware/VIAME/tree/master/examples/search_and_rapid_model_generation/smqtk_on_chips

| Building and running `this example`_ requires: 
|
|  (a) The python packages: numpy, pymongo
|  (b) Linux or Mac systems, Windows is not fully supported. 
|  (c) A VIAME build with the following flags enabled:
|        - VIAME_ENABLE_SMQTK
|        - VIAME_ENABLE_CAFFE
|        - VIAME_ENABLE_CUDA (Optional, but desired for performance)
|        - VIAME_ENABLE_YOLO (Optional, for detector ingest example (c))
|  (d) An installation of MongoDB to run the web GUI client
         - This can either be from a system install or from:
|          https://docs.mongodb.com/manual/tutorial/install-mongodb-on-linux/
|
| The system can either be configured to perform queries via: 
|
| (a) Indexing descriptors around each full input image as-is.
| (b) Tiling up each input image into fixed-size tiles. 
| (c) Indexing descriptors around detections generated by arbitrary detectors. 
|
.. _this example: https://github.com/Kitware/VIAME/tree/master/examples/search_and_rapid_model_generation/smqtk_on_chips

First, reset_database.sh should be called to initialize a new database. 

Next, depending on which indexing paradigm you are using, one of the 3 ingesting shell
scripts can be called (e.g. ingest_image_folder, ingest_using_windowing, or
ingest_using_detections.sh).

Which ingesting paradigm you want to use depends on a few factors: does your object
take up the entire image? Use (a). Are your object(s) a fixed known size in your image?
Use (b). Are your objects multiple scales and do you have a detector which works decently
on your dataset? Use (c), running an object detector with a low-confidence threshold.

After ingesting data, you want to launch the web-GUI service (launch_gui_backend.sh),
and connect to the GUI via going to the default website 'http://0.0.0.0:5000/', at least
if you didn't change any hosting settings. The default GUI log in is username: demo,
password: demo after which you can log in, perform image queries, and iterative
refinement on the results to generate an improved model for your initial query.

Common Errors
=============

.. code-block:: bash

  ConfigurationError: Server at 127.0.0.1:27017 reports wire version 0,
  but this version of PyMongo requires at least 2 (MongoDB 2.6).

Your system mongod package is too old and doesn't match your python version, install a mongodb
from the above website and add it to your path.

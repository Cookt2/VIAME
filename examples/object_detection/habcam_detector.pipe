# Habcam Pipeline
#
# Runs multiple object detectors in a pipeline.
#
# Un-comment each detector in order to use it (memory usage / load will increase):
#
#    (a) YOLOv2 - High Res YOLOv2 Scallop Detector Edition (enabled by default)
#    (b) YOLOv2 - Low Res YOLOv2 Generic Fish Detector (enabled by default)
#    (c) Scallop-TK - Alternative Scallop Detector (disabled by default)
#    (d) Scallop-Finder - Alternative Scallop Detector (disabled by default)
#
# This pipeline assumes stereo imagery together in a composite image as input. The first
# 'splitting' process selects either the left or right side of the image to perform
# detection on. Replace 'split.left_image' with 'split.right_image' to perform detection
# on the other side.
#
# Notes: YOLOv2, Scallop-TK, and Scallop-Finder algorithm performance still needs to
# be compared in detail. Speed-wise YOLOv2 is fast if you have a powerful GPU.
# Scallop-Finder does not currently do any sand dollar vs scallop classification, but it's
# proposal generation technique could still be compared to the other two with an additional
# classifier built on top.

# ================================= GLOBAL PROPERTIES ====================================
# global pipeline config
#
config _pipeline:_edge
       :capacity                     5

# ================================== INPUT FRAME LIST ====================================
process input
  :: frame_list_input
  :image_list_file                   habcam_list.txt
  :frame_time                        0.03333
  :image_reader:type                 ocv

# ===================================== CROP INPUTS ======================================
process split
  :: split_image
  :split_image:type                  ocv

connect from input.image
        to   split.image

# =================================== YOLO V2 SCALLOP ====================================

process scallop_yolo_v2_detector
  :: image_object_detector
  :detector:type                     darknet

  block detector:darknet

    # Network config, weights, and names
    relativepath net_config =        models/habcam_yolo_v2.cfg
    relativepath weight_file =       models/habcam_yolo_v2.weights
    relativepath class_names =       models/habcam_yolo_v2.lbl

    # Detector parameters
    :thresh                          0.001
    :hier_thresh                     0.001
    :gpu_index                       0

    # Image scaling parameters
    :resize_option                   maintain_ar
    :resize_ni                       960
    :resize_nj                       960
    :scale                           1.0

  endblock

process scallop_yolo_v2_filter
  :: detected_object_filter
  :filter:type                       class_probablity_filter

  block filter:class_probablity_filter

    # Filter parameters
    :threshold                       0.100
    :keep_all_classes                false
    :keep_classes                    live_scallop;dead_scallop
  
  endblock

process scallop_yolo_v2_kw18_writer
  :: detected_object_output

  # Type of file to output
  :file_name                         output/scallop_yolo_v2_detections.kw18
  :writer:type                       kw18

  # Write out FSO classifications alongside tracks
  :writer:kw18:write_tot             true
  :writer:kw18:tot_field1_ids        dead_scallop
  :writer:kw18:tot_field2_ids        live_scallop

process scallop_yolo_v2_csv_writer
  :: detected_object_output

  # Type of file to output
  :file_name                         output/scallop_yolo_v2_detections.csv
  :writer:type                       csv

connect from split.left_image
        to   scallop_yolo_v2_detector.image

connect from scallop_yolo_v2_detector.detected_object_set
        to   scallop_yolo_v2_filter.detected_object_set

connect from scallop_yolo_v2_filter.detected_object_set
        to   scallop_yolo_v2_kw18_writer.detected_object_set

connect from input.image_file_name
        to   scallop_yolo_v2_kw18_writer.image_file_name

connect from scallop_yolo_v2_filter.detected_object_set
        to   scallop_yolo_v2_csv_writer.detected_object_set

connect from input.image_file_name
        to   scallop_yolo_v2_csv_writer.image_file_name

# ==================================== YOLO V2 SKATE =====================================

process skate_yolo_v2_detector
  :: image_object_detector
  :detector:type                     darknet

  block detector:darknet

    # Network config, weights, and names
    relativepath net_config =        models/default_yolo_v2.cfg
    relativepath weight_file =       models/default_yolo_v2.weights
    relativepath class_names =       models/default_yolo_v2.lbl

    # Detector parameters
    :thresh                          0.001
    :hier_thresh                     0.001
    :gpu_index                       0

    # Image scaling parameters
    :resize_option                   maintain_ar
    :resize_ni                       544
    :resize_nj                       544
    :scale                           1.0

  endblock

process skate_yolo_v2_filter
  :: detected_object_filter
  :filter:type                       class_probablity_filter

  block filter:class_probablity_filter

    # Filter parameters
    :threshold                       0.100
    :keep_all_classes                false
    :keep_classes                    fish

  endblock

process skate_yolo_v2_kw18_writer
  :: detected_object_output

  # Type of file to output
  :file_name                         output/skate_yolo_v2_detections.kw18
  :writer:type                       kw18

  # Write out FSO classifications alongside tracks
  :writer:kw18:write_tot             true
  :writer:kw18:tot_field1_ids        fish
  :writer:kw18:tot_field2_ids        scallop

process skate_yolo_v2_csv_writer
  :: detected_object_output

  # Type of file to output
  :file_name     output/skate_yolo_v2_detections.csv
  :writer:type   csv

connect from split.left_image
        to   skate_yolo_v2_detector.image

connect from skate_yolo_v2_detector.detected_object_set
        to   skate_yolo_v2_filter.detected_object_set

connect from skate_yolo_v2_filter.detected_object_set
        to   skate_yolo_v2_kw18_writer.detected_object_set

connect from input.image_file_name
        to   skate_yolo_v2_kw18_writer.image_file_name

connect from skate_yolo_v2_filter.detected_object_set
        to   skate_yolo_v2_csv_writer.detected_object_set

connect from input.image_file_name
        to   skate_yolo_v2_csv_writer.image_file_name

# ====================================== SCALLOP-TK ======================================

#process scallop_tk_detector
#  :: image_object_detector
#  :detector:type    scallop_tk
#
#  block detector:scallop_tk
#    relativepath config_file =      models/scallop_tk/SYSTEM_SETTINGS
#  endblock
#
#process scallop_tk_kw18_writer
#  :: detected_object_output
#
#  # Type of file to output
#  :file_name                         output/scallop_tk_detections.kw18
#  :writer:type                       kw18
#
#  # Write out FSO classifications alongside tracks
#  :writer:kw18:write_tot             true
#  :writer:kw18:tot_field1_ids        fish
#  :writer:kw18:tot_field2_ids        live_scallop
#
#process scallop_tk_csv_writer
#  :: detected_object_output
#
#  # Type of file to output
#  :file_name                         output/scallop_tk_detections.csv
#  :writer:type                       csv
#
#connect from split.left_image
#        to   scallop_tk_detector.image
#
#connect from scallop_tk_detector.detected_object_set
#        to   scallop_tk_kw18_writer.detected_object_set
#
#connect from input.image_file_name
#        to   scallop_tk_kw18_writer.image_file_name
#
#connect from scallop_tk_detector.detected_object_set
#        to   scallop_tk_csv_writer.detected_object_set
#
#connect from input.image_file_name
#        to   scallop_tk_csv_writer.image_file_name
#

# ==================================== SCALLOP-FINDER ====================================

#process lanl_detector
#  :: image_object_detector
#   :detector:type                    matlab
#   :detector:matlab:program_file     ../../matlab/lanl_scallop_finder/ScallopFinder.m
#
#process lanl_kw18_writer
#  :: detected_object_output
#
#  # Type of file to output
#  :file_name                         output/lanl_detections.kw18
#  :writer:type                       kw18
#
#  # Write out FSO classifications alongside tracks
#  :writer:kw18:write_tot             true
#  :writer:kw18:tot_field1_ids        fish
#  :writer:kw18:tot_field2_ids        live_scallop
#
#process lanl_csv_writer
#  :: detected_object_output
#
#  # Type of file to output
#  :file_name                         output/lanl_detections.csv
#  :writer:type                       csv
#
#
#connect from split.left_image
#        to   lanl_detector.image
#
#connect from lanl_detector.detected_object_set
#        to   lanl_kw18_writer.detected_object_set
#
#connect from input.image_file_name
#        to   lanl_kw18_writer.image_file_name
#
#connect from lanl_detector.detected_object_set
#        to   lanl_csv_writer.detected_object_set
#
#connect from input.image_file_name
#        to   lanl_csv_writer.image_file_name

# -- end of file --

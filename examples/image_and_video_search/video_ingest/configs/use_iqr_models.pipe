# Example simple tracker pipeline
#
# Runs a multi-node object tracking, descriptor generation, and indexing pipeline

# ============================== GLOBAL PROPERTIES =================================
# global pipeline config
#
config _pipeline:_edge
   :capacity                                   10

config _scheduler
   :type                                       pythread_per_process

# ================================== VIDEO INPUT ===================================
process input
  :: video_input
  :video_filename                              [INSERT_ME]
  :frame_time                                  0.033
  :video_reader:type                           vidl_ffmpeg

# =================================== DETECTOR =====================================

process detector
  :: image_object_detector
  :detector:type                               darknet

  # Network config
  relativepath detector:darknet:net_config  =  models/scallop_and_fish.cfg
  relativepath detector:darknet:weight_file =  models/scallop_and_fish.weights
  relativepath detector:darknet:class_names =  models/scallop_and_fish.lbl

  # Detector parameters
  :detector:darknet:thresh                     0.001
  :detector:darknet:hier_thresh                0.001
  :detector:darknet:gpu_index                  0

  # Image scaling parameters
  :detector:darknet:resize_option              maintain_ar
  :detector:darknet:resize_ni                  544
  :detector:darknet:resize_nj                  544
  :detector:darknet:scale                      1.0

# ============================= SECONDARY CLASSIFIER ===============================

process detection_descriptor
 :: compute_track_descriptors
  :inject_to_detections                        true
  :computer:type                               burnout
  relativepath computer:burnout:config_file =  burnout_det_descriptors.conf

# Connect inputs to detection descriptor
connect from input.image
        to   detection_descriptor.image
connect from input.timestamp
        to   detection_descriptor.timestamp
connect from detector.detected_object_set
        to   detection_descriptor.detected_object_set

process reclassifier
  :: refine_detections
  :refiner:type                                svm
  :refiner:svm:model_dir                       trained_svm_models

connect from input.image
        to   reclassifier.image
connect from detection_descriptor.detected_object_set
        to   reclassifier.detected_object_set

# ==================================== WRITER ======================================

process detector_writer
  :: detected_object_output

  # Type of file to output
  :file_name                                   [INSERT_ME]
  :writer:type                                 kw18

  # Write out FSO classifications alongside tracks
  :writer:kw18:write_tot                       true
  :writer:kw18:tot_field1_ids                  fish
  :writer:kw18:tot_field2_ids                  scallop

connect from input.image
        to   detector.image
connect from detector.detected_object_set
        to   detector_writer.detected_object_set

# -- end of file --

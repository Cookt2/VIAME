# Example simple tracker pipeline
#
# Runs a multi-node object tracking, descriptor generation, and indexing pipeline

# ============================== GLOBAL PROPERTIES =================================
# global pipeline config
#
config _pipeline:_edge
   :capacity                                   10

config _scheduler
   :type                                       pythread_per_process

config global
   :input_filename                             input_list.txt
   :output_folder                              database
   :output_basename                            output
   :output_detection_file                      database/output_detections.kw18
   :output_track_file                          database/output_tracks.kw18
   :output_descriptor_file                     database/output_descriptors.csv

# =============================== INPUT FRAME LIST =================================
process input
  :: frame_list_input
  :image_list_file                             $CONFIG{global:input_filename}
  :frame_time                                  0.50
  :image_reader:type                           vxl

# =================================== DETECTOR =====================================

process detector
  :: image_object_detector
  :detector:type                               darknet

  # Network config
  relativepath detector:darknet:net_config  =  models/scallop_and_fish.cfg
  relativepath detector:darknet:weight_file =  models/scallop_and_fish.weights
  relativepath detector:darknet:class_names =  models/scallop_and_fish.lbl

  # Detector parameters
  :detector:darknet:thresh                     0.001
  :detector:darknet:hier_thresh                0.001
  :detector:darknet:gpu_index                  0

  # Image scaling parameters
  :detector:darknet:resize_option              maintain_ar
  :detector:darknet:resize_ni                  544
  :detector:darknet:resize_nj                  544
  :detector:darknet:scale                      1.0

process detector_writer
  :: detected_object_output

  # Type of file to output
  :file_name                                   $CONFIG{global:output_detection_file}
  :writer:type                                 kw18

  # Write out FSO classifications alongside tracks
  :writer:kw18:write_tot                       true
  :writer:kw18:tot_field1_ids                  fish
  :writer:kw18:tot_field2_ids                  scallop

connect from input.image
        to   detector.image
connect from detector.detected_object_set
        to   detector_writer.detected_object_set
connect from input.image_file_name
        to   detector_writer.image_file_name

# ================================= CORE TRACKER ===================================

process detection_descriptor
 :: compute_track_descriptors
  :inject_to_detections                        true
  :computer:type                               burnout
  relativepath computer:burnout:config_file =  burnout_det_descriptors.conf

process tracker
 :: compute_association_matrix
  :matrix_generator:type                       from_features
  :matrix_generator:from_features:max_distance 50

  block matrix_generator:from_features:filter
    :type                                      class_probablity_filter
    :class_probablity_filter:threshold         0.001
    :class_probablity_filter:keep_all_classes  false
    :class_probablity_filter:keep_classes      fish;scallop
  endblock

process track_associator
  :: associate_detections_to_tracks
  :track_associator:type                       threshold
  :track_associator:threshold:threshold        100.0
  :track_associator:threshold:higher_is_better false

process track_initializer
  :: initialize_object_tracks
  :track_initializer:type                      threshold

  block track_initializer:threshold:filter
    :type                                      class_probablity_filter
    :class_probablity_filter:threshold         0.001
    :class_probablity_filter:keep_all_classes  false
    :class_probablity_filter:keep_classes      fish;scallop
  endblock

# Connect inputs to detection descriptor
connect from input.image
        to   detection_descriptor.image
connect from input.timestamp
        to   detection_descriptor.timestamp
connect from detector.detected_object_set
        to   detection_descriptor.detected_object_set

# Connect inputs to tracker
connect from input.image
        to   tracker.image
connect from input.timestamp
        to   tracker.timestamp
connect from detection_descriptor.detected_object_set
        to   tracker.detected_object_set
connect from track_initializer.object_track_set
        to   tracker.object_track_set

# Connect inputs to track_associator
connect from input.image
        to   track_associator.image
connect from input.timestamp
        to   track_associator.timestamp
connect from tracker.matrix_d
        to   track_associator.matrix_d
connect from tracker.object_track_set
        to   track_associator.object_track_set
connect from tracker.detected_object_set
        to   track_associator.detected_object_set

# Connect inputs to track_initializer
connect from input.image
        to   track_initializer.image
connect from input.timestamp
        to   track_initializer.timestamp
connect from track_associator.object_track_set
        to   track_initializer.object_track_set
connect from track_associator.unused_detections
        to   track_initializer.detected_object_set

# ============================ ANALYZE AND INDEX DATA ==============================

process track_writer
  :: write_object_track
  :file_name                                  $CONFIG{global:output_track_file}
  :writer:type                                kw18

connect from track_initializer.object_track_set
        to   track_writer.object_track_set

process kwa_writer
  :: kw_archive_writer
  :output_directory                           $CONFIG{global:output_folder}
  :base_filename                              $CONFIG{global:output_basename}
  :separate_meta                              true
  :stream_id                                  $CONFIG{global:output_basename}
  :compress_image                             true
  :static/gsd[ro]                             common:fixed_gsd
  :static/corner_points[ro]                   0 0 0 0 0 0 0 0

connect from input.timestamp
        to   kwa_writer.timestamp
connect from input.image
        to   kwa_writer.image

process track_descriptor
 :: compute_track_descriptors
  :add_custom_uid                             true
  :uid_basename                               $CONFIG{global:output_basename}
  :computer:type                              burnout
  relativepath computer:burnout:config_file = burnout_trk_descriptors.conf

connect from input.image
        to   track_descriptor.image
connect from input.timestamp
        to   track_descriptor.timestamp
connect from track_initializer.object_track_set
        to   track_descriptor.object_track_set

process descriptor_writer
  :: write_track_descriptor
  :file_name                                  $CONFIG{global:output_descriptor_file}
  :writer:type                                csv
  :writer:csv:write_raw_descriptor            false
  :writer:csv:write_world_loc                 false

connect from track_descriptor.track_descriptor_set
        to   descriptor_writer.track_descriptor_set

process smqtk_indexer
  :: smqtk_ingest_descriptors
  relativepath config_file =                  smqtk_postgres_ingest.json

connect from track_descriptor.descriptor_set
        to   smqtk_indexer.descriptor_set

connect from track_descriptor.string_vector
        to   smqtk_indexer.string_vector


# -- end of file --

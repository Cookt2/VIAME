# Ingest video pipeline using pytorch descriptors
#
# Runs a multi-node object tracking, descriptor generation, and indexing pipeline
#
# This pipe requires an input source node 'input' to be defined elsewhere

# ================================== VIDEO INPUT ===================================
process downsampler
  :: downsample
  :target_frame_rate                           2
  :burst_frame_count                           0
  :burst_frame_break                           0

connect from input.image
        to   downsampler.input_1
connect from input.frame_rate
        to   downsampler.frame_rate
connect from input.timestamp
        to   downsampler.timestamp

# =================================== DETECTOR =====================================

process detector
  :: image_object_detector
  :detector:type    darknet

  block detector:darknet

    # Network config, weights, and names
    relativepath net_config  =             models/mouss_yolo_v2_960_generic.cfg
    relativepath weight_file =             models/mouss_yolo_v2_960_generic.weights
    relativepath class_names =             models/mouss_yolo_v2_960_generic.lbl

    # Detector parameters
    :thresh                                0.020
    :hier_thresh                           0.001
    :gpu_index                             0

    # Image scaling parameters
    :resize_option                         maintain_ar
    :resize_ni                             960
    :resize_nj                             960
    :scale                                 1.0

  endblock

process detector_writer
  :: detected_object_output

  # Type of file to output
  :file_name                                   [INSERT_ME]
  :writer:type                                 viame_csv

connect from downsampler.output_1
        to   detector.image

connect from detector.detected_object_set
        to   detector_writer.detected_object_set


# ================================= CORE TRACKER ===================================

process detection_filter
  :: detected_object_filter
  :filter:type                                 class_probablity_filter

  block filter:class_probablity_filter

    # Filter parameters
    :threshold                                 0.30
    :keep_all_classes                          true
  
  endblock

connect from detector.detected_object_set
        to   detection_filter.detected_object_set

process track_initializer
  :: initialize_object_tracks
  :track_initializer:type                      threshold

  block track_initializer:threshold:filter
    :type                                      class_probablity_filter
    :class_probablity_filter:threshold         0.01
    :class_probablity_filter:keep_all_classes  true
    :class_probablity_filter:keep_classes      generic_object_proposal
  endblock

connect from downsampler.output_1
        to   track_initializer.image
connect from downsampler.timestamp
        to   track_initializer.timestamp
connect from detection_filter.detected_object_set
        to   track_initializer.detected_object_set

process track_writer_kw18
  :: write_object_track

  # Type of file to output
  :file_name                                   [INSERT_ME]
  :writer:type                                 kw18

  # Write out FSO classifications alongside tracks
  :writer:kw18:write_tot             true
  :writer:kw18:tot_field1_ids        fish
  :writer:kw18:tot_field2_ids        scallop

connect from track_initializer.object_track_set
        to   track_writer_kw18.object_track_set
connect from downsampler.timestamp
        to   track_writer_kw18.timestamp

# -- end of file --
